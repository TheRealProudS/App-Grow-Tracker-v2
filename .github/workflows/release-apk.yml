name: Build and Publish APK

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: "Build type: release or debug"
        required: false
        default: "release"
      createRelease:
        description: "Create GitHub Release and upload APK"
        required: false
        default: "true"
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ORG_GRADLE_PROJECT_RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
      ORG_GRADLE_PROJECT_RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
      ORG_GRADLE_PROJECT_RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: |
            platform-tools
            platforms;android-35
            build-tools;35.0.0

      - name: Accept Android SDK licenses (non-interactive)
        shell: bash
        run: |
          set -e
          SDKMANAGER="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
          if [ ! -x "$SDKMANAGER" ]; then
            SDKMANAGER="$(command -v sdkmanager || true)"
          fi
          if [ -z "$SDKMANAGER" ]; then
            echo "sdkmanager not found" >&2
            exit 1
          fi
          yes | "$SDKMANAGER" --licenses || true

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Decode keystore (if provided)
        env:
          RELEASE_STORE_FILE_B64: ${{ secrets.RELEASE_STORE_FILE_B64 }}
        run: |
          mkdir -p keys
          if [ -n "$RELEASE_STORE_FILE_B64" ]; then
            echo "Decoding keystore from secret..."
            echo "$RELEASE_STORE_FILE_B64" | base64 -d > keys/release.jks
            echo "ORG_GRADLE_PROJECT_RELEASE_STORE_FILE=keys/release.jks" >> $GITHUB_ENV
          else
            echo "No RELEASE_STORE_FILE_B64 secret configured. Will build debug if release signing is required."
          fi
        shell: bash

      - name: Build APK
        run: |
          set -e
          if [ "${{ github.event.inputs.buildType }}" = "debug" ]; then
            ./gradlew :app:assembleDebug --stacktrace
            echo "apk_path=app/build/outputs/apk/debug/app-debug.apk" >> $GITHUB_OUTPUT
          else
            if [ -n "$ORG_GRADLE_PROJECT_RELEASE_STORE_FILE" ]; then
              echo "Using release signing"
              ./gradlew :app:assembleRelease --stacktrace
              echo "apk_path=app/build/outputs/apk/release/app-release.apk" >> $GITHUB_OUTPUT
            else
              echo "Release signing not configured, building debug instead"
              ./gradlew :app:assembleDebug --stacktrace
              echo "apk_path=app/build/outputs/apk/debug/app-debug.apk" >> $GITHUB_OUTPUT
            fi
          fi
        id: build
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: ${{ steps.build.outputs.apk_path }}

      - name: Compute SHA-256
        id: sha
        run: |
          sha256sum ${{ steps.build.outputs.apk_path }} | awk '{print $1}' > sha256.txt
          echo "sha=$(cat sha256.txt)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ github.event_name == 'push' || github.event.inputs.createRelease != 'false' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.build.outputs.apk_path }}
            sha256.txt
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
