name: Build and Publish APK

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: "Build type: release or debug"
        required: false
        default: "release"
      createRelease:
        description: "Create GitHub Release and upload APK"
        required: false
        default: "true"
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ORG_GRADLE_PROJECT_RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
      ORG_GRADLE_PROJECT_RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
      ORG_GRADLE_PROJECT_RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew
        shell: bash

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # Omit setup-android action to avoid its internal license prompts; we bootstrap cmdline-tools ourselves below

      - name: Install required SDK packages
        shell: bash
        run: |
          set -e
          : "${ANDROID_SDK_ROOT:=/usr/local/lib/android/sdk}"
          echo "Installing Android SDK packages..."
          # Prefer highest numeric cmdline-tools version over 'latest' to avoid stale symlink
          SDKMANAGER=$(ls -1d "${ANDROID_SDK_ROOT}/cmdline-tools"/*/bin/sdkmanager 2>/dev/null | grep -v "/latest/" | sort -V | tail -n1 || true)
          if [ -z "$SDKMANAGER" ] || [ ! -x "$SDKMANAGER" ]; then
            if [ -x "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" ]; then
              SDKMANAGER="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager"
            fi
          fi
          if [ -z "$SDKMANAGER" ] || [ ! -x "$SDKMANAGER" ]; then
            echo "No sdkmanager found; bootstrapping commandline-tools..."
            mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
            curl -sSL -o /tmp/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip
            unzip -q /tmp/cmdline-tools.zip -d "${ANDROID_SDK_ROOT}/cmdline-tools"
            mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools" "${ANDROID_SDK_ROOT}/cmdline-tools/16.0"
            SDKMANAGER="${ANDROID_SDK_ROOT}/cmdline-tools/16.0/bin/sdkmanager"
          fi
          echo "Using sdkmanager at: $SDKMANAGER"
          "$SDKMANAGER" --version || true

          # If this sdkmanager is too old (XML v3), re-bootstrap a newer one and retry once
          set +e
          "$SDKMANAGER" --sdk_root="${ANDROID_SDK_ROOT}" --licenses >/dev/null 2>&1 <<'EOF'
          y
          y
          y
          y
          y
          y
          EOF
          LIC_STATUS=$?
          set -e
          if [ $LIC_STATUS -ne 0 ]; then
            echo "License acceptance failed; ensuring latest cmdline-tools is installed..."
            mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
            curl -sSL -o /tmp/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-12266719_latest.zip
            unzip -q /tmp/cmdline-tools.zip -d "${ANDROID_SDK_ROOT}/cmdline-tools"
            rm -rf "${ANDROID_SDK_ROOT}/cmdline-tools/16.0"
            mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools" "${ANDROID_SDK_ROOT}/cmdline-tools/16.0"
            SDKMANAGER="${ANDROID_SDK_ROOT}/cmdline-tools/16.0/bin/sdkmanager"
            echo "Retrying licenses with: $SDKMANAGER"
            set +e
            "$SDKMANAGER" --sdk_root="${ANDROID_SDK_ROOT}" --licenses <<'EOF'
            y
            y
            y
            y
            y
            y
            EOF
            set -e
          fi

          # Install required packages explicitly
          "$SDKMANAGER" --sdk_root="${ANDROID_SDK_ROOT}" --install \
            "platform-tools" \
            "platforms;android-35" \
            "build-tools;35.0.0" || {
              echo "Falling back to build-tools;34.0.0"
              "$SDKMANAGER" --sdk_root="${ANDROID_SDK_ROOT}" --install "build-tools;34.0.0"
            }

          # Expose ANDROID_HOME and update PATH for Gradle
          echo "ANDROID_HOME=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
          echo "PATH=${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/16.0/bin:${PATH}" >> $GITHUB_ENV

      - name: Configure sdk.dir for CI
        shell: bash
        run: |
          # Ensure Gradle uses the CI SDK instead of any committed local path
          echo "sdk.dir=${ANDROID_SDK_ROOT}" > local.properties

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Decode keystore (if provided)
        env:
          RELEASE_STORE_FILE_B64: ${{ secrets.RELEASE_STORE_FILE_B64 }}
        run: |
          mkdir -p app/keys
          if [ -n "$RELEASE_STORE_FILE_B64" ]; then
            echo "Decoding keystore from secret..."
            echo "$RELEASE_STORE_FILE_B64" | base64 -d > app/keys/release.jks
            echo "ORG_GRADLE_PROJECT_RELEASE_STORE_FILE=$GITHUB_WORKSPACE/app/keys/release.jks" >> $GITHUB_ENV
          else
            echo "No RELEASE_STORE_FILE_B64 secret configured. Will build debug if release signing is required."
          fi
        shell: bash

      - name: Build APK
        run: |
          set -e
          if [ "${{ github.event.inputs.buildType }}" = "debug" ]; then
            ./gradlew :app:assembleDebug --stacktrace
            echo "apk_path=app/build/outputs/apk/debug/app-debug.apk" >> $GITHUB_OUTPUT
          else
            if [ -n "$ORG_GRADLE_PROJECT_RELEASE_STORE_FILE" ]; then
              echo "Using release signing"
              ./gradlew :app:assembleRelease --stacktrace
              echo "apk_path=app/build/outputs/apk/release/app-release.apk" >> $GITHUB_OUTPUT
            else
              echo "Release signing not configured, building debug instead"
              ./gradlew :app:assembleDebug --stacktrace
              echo "apk_path=app/build/outputs/apk/debug/app-debug.apk" >> $GITHUB_OUTPUT
            fi
          fi
        id: build
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: apk
          path: ${{ steps.build.outputs.apk_path }}

      - name: Compute SHA-256
        id: sha
        run: |
          sha256sum ${{ steps.build.outputs.apk_path }} | awk '{print $1}' > sha256.txt
          echo "sha=$(cat sha256.txt)" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: ${{ github.event_name == 'push' || github.event.inputs.createRelease != 'false' }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.build.outputs.apk_path }}
            sha256.txt
          tag_name: ${{ github.ref_name }}
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
